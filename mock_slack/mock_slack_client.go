// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zpatrick/slackbot (interfaces: SlackClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/nlopes/slack"
)

// MockSlackClient is a mock of SlackClient interface
type MockSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientMockRecorder
}

// MockSlackClientMockRecorder is the mock recorder for MockSlackClient
type MockSlackClientMockRecorder struct {
	mock *MockSlackClient
}

// NewMockSlackClient creates a new mock instance
func NewMockSlackClient(ctrl *gomock.Controller) *MockSlackClient {
	mock := &MockSlackClient{ctrl: ctrl}
	mock.recorder = &MockSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlackClient) EXPECT() *MockSlackClientMockRecorder {
	return m.recorder
}

// AddPin mocks base method
func (m *MockSlackClient) AddPin(arg0 string, arg1 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "AddPin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPin indicates an expected call of AddPin
func (mr *MockSlackClientMockRecorder) AddPin(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPin", reflect.TypeOf((*MockSlackClient)(nil).AddPin), arg0, arg1)
}

// AddPinContext mocks base method
func (m *MockSlackClient) AddPinContext(arg0 context.Context, arg1 string, arg2 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "AddPinContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPinContext indicates an expected call of AddPinContext
func (mr *MockSlackClientMockRecorder) AddPinContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPinContext", reflect.TypeOf((*MockSlackClient)(nil).AddPinContext), arg0, arg1, arg2)
}

// AddReaction mocks base method
func (m *MockSlackClient) AddReaction(arg0 string, arg1 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "AddReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReaction indicates an expected call of AddReaction
func (mr *MockSlackClientMockRecorder) AddReaction(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*MockSlackClient)(nil).AddReaction), arg0, arg1)
}

// AddReactionContext mocks base method
func (m *MockSlackClient) AddReactionContext(arg0 context.Context, arg1 string, arg2 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "AddReactionContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReactionContext indicates an expected call of AddReactionContext
func (mr *MockSlackClientMockRecorder) AddReactionContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReactionContext", reflect.TypeOf((*MockSlackClient)(nil).AddReactionContext), arg0, arg1, arg2)
}

// AddStar mocks base method
func (m *MockSlackClient) AddStar(arg0 string, arg1 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "AddStar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStar indicates an expected call of AddStar
func (mr *MockSlackClientMockRecorder) AddStar(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStar", reflect.TypeOf((*MockSlackClient)(nil).AddStar), arg0, arg1)
}

// AddStarContext mocks base method
func (m *MockSlackClient) AddStarContext(arg0 context.Context, arg1 string, arg2 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "AddStarContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStarContext indicates an expected call of AddStarContext
func (mr *MockSlackClientMockRecorder) AddStarContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStarContext", reflect.TypeOf((*MockSlackClient)(nil).AddStarContext), arg0, arg1, arg2)
}

// ArchiveChannel mocks base method
func (m *MockSlackClient) ArchiveChannel(arg0 string) error {
	ret := m.ctrl.Call(m, "ArchiveChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveChannel indicates an expected call of ArchiveChannel
func (mr *MockSlackClientMockRecorder) ArchiveChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveChannel", reflect.TypeOf((*MockSlackClient)(nil).ArchiveChannel), arg0)
}

// ArchiveChannelContext mocks base method
func (m *MockSlackClient) ArchiveChannelContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "ArchiveChannelContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveChannelContext indicates an expected call of ArchiveChannelContext
func (mr *MockSlackClientMockRecorder) ArchiveChannelContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveChannelContext", reflect.TypeOf((*MockSlackClient)(nil).ArchiveChannelContext), arg0, arg1)
}

// ArchiveConversation mocks base method
func (m *MockSlackClient) ArchiveConversation(arg0 string) error {
	ret := m.ctrl.Call(m, "ArchiveConversation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveConversation indicates an expected call of ArchiveConversation
func (mr *MockSlackClientMockRecorder) ArchiveConversation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveConversation", reflect.TypeOf((*MockSlackClient)(nil).ArchiveConversation), arg0)
}

// ArchiveConversationContext mocks base method
func (m *MockSlackClient) ArchiveConversationContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "ArchiveConversationContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveConversationContext indicates an expected call of ArchiveConversationContext
func (mr *MockSlackClientMockRecorder) ArchiveConversationContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveConversationContext", reflect.TypeOf((*MockSlackClient)(nil).ArchiveConversationContext), arg0, arg1)
}

// ArchiveGroup mocks base method
func (m *MockSlackClient) ArchiveGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "ArchiveGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveGroup indicates an expected call of ArchiveGroup
func (mr *MockSlackClientMockRecorder) ArchiveGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveGroup", reflect.TypeOf((*MockSlackClient)(nil).ArchiveGroup), arg0)
}

// ArchiveGroupContext mocks base method
func (m *MockSlackClient) ArchiveGroupContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "ArchiveGroupContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveGroupContext indicates an expected call of ArchiveGroupContext
func (mr *MockSlackClientMockRecorder) ArchiveGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveGroupContext", reflect.TypeOf((*MockSlackClient)(nil).ArchiveGroupContext), arg0, arg1)
}

// AuthTest mocks base method
func (m *MockSlackClient) AuthTest() (*slack.AuthTestResponse, error) {
	ret := m.ctrl.Call(m, "AuthTest")
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTest indicates an expected call of AuthTest
func (mr *MockSlackClientMockRecorder) AuthTest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTest", reflect.TypeOf((*MockSlackClient)(nil).AuthTest))
}

// AuthTestContext mocks base method
func (m *MockSlackClient) AuthTestContext(arg0 context.Context) (*slack.AuthTestResponse, error) {
	ret := m.ctrl.Call(m, "AuthTestContext", arg0)
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTestContext indicates an expected call of AuthTestContext
func (mr *MockSlackClientMockRecorder) AuthTestContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTestContext", reflect.TypeOf((*MockSlackClient)(nil).AuthTestContext), arg0)
}

// CloseConversation mocks base method
func (m *MockSlackClient) CloseConversation(arg0 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "CloseConversation", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloseConversation indicates an expected call of CloseConversation
func (mr *MockSlackClientMockRecorder) CloseConversation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConversation", reflect.TypeOf((*MockSlackClient)(nil).CloseConversation), arg0)
}

// CloseConversationContext mocks base method
func (m *MockSlackClient) CloseConversationContext(arg0 context.Context, arg1 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "CloseConversationContext", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloseConversationContext indicates an expected call of CloseConversationContext
func (mr *MockSlackClientMockRecorder) CloseConversationContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConversationContext", reflect.TypeOf((*MockSlackClient)(nil).CloseConversationContext), arg0, arg1)
}

// CloseGroup mocks base method
func (m *MockSlackClient) CloseGroup(arg0 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "CloseGroup", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloseGroup indicates an expected call of CloseGroup
func (mr *MockSlackClientMockRecorder) CloseGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseGroup", reflect.TypeOf((*MockSlackClient)(nil).CloseGroup), arg0)
}

// CloseGroupContext mocks base method
func (m *MockSlackClient) CloseGroupContext(arg0 context.Context, arg1 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "CloseGroupContext", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloseGroupContext indicates an expected call of CloseGroupContext
func (mr *MockSlackClientMockRecorder) CloseGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseGroupContext", reflect.TypeOf((*MockSlackClient)(nil).CloseGroupContext), arg0, arg1)
}

// CloseIMChannel mocks base method
func (m *MockSlackClient) CloseIMChannel(arg0 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "CloseIMChannel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloseIMChannel indicates an expected call of CloseIMChannel
func (mr *MockSlackClientMockRecorder) CloseIMChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIMChannel", reflect.TypeOf((*MockSlackClient)(nil).CloseIMChannel), arg0)
}

// CloseIMChannelContext mocks base method
func (m *MockSlackClient) CloseIMChannelContext(arg0 context.Context, arg1 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "CloseIMChannelContext", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloseIMChannelContext indicates an expected call of CloseIMChannelContext
func (mr *MockSlackClientMockRecorder) CloseIMChannelContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIMChannelContext", reflect.TypeOf((*MockSlackClient)(nil).CloseIMChannelContext), arg0, arg1)
}

// ConnectRTM mocks base method
func (m *MockSlackClient) ConnectRTM() (*slack.Info, string, error) {
	ret := m.ctrl.Call(m, "ConnectRTM")
	ret0, _ := ret[0].(*slack.Info)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConnectRTM indicates an expected call of ConnectRTM
func (mr *MockSlackClientMockRecorder) ConnectRTM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectRTM", reflect.TypeOf((*MockSlackClient)(nil).ConnectRTM))
}

// ConnectRTMContext mocks base method
func (m *MockSlackClient) ConnectRTMContext(arg0 context.Context) (*slack.Info, string, error) {
	ret := m.ctrl.Call(m, "ConnectRTMContext", arg0)
	ret0, _ := ret[0].(*slack.Info)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConnectRTMContext indicates an expected call of ConnectRTMContext
func (mr *MockSlackClientMockRecorder) ConnectRTMContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectRTMContext", reflect.TypeOf((*MockSlackClient)(nil).ConnectRTMContext), arg0)
}

// CreateChannel mocks base method
func (m *MockSlackClient) CreateChannel(arg0 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockSlackClientMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockSlackClient)(nil).CreateChannel), arg0)
}

// CreateChannelContext mocks base method
func (m *MockSlackClient) CreateChannelContext(arg0 context.Context, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "CreateChannelContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelContext indicates an expected call of CreateChannelContext
func (mr *MockSlackClientMockRecorder) CreateChannelContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelContext", reflect.TypeOf((*MockSlackClient)(nil).CreateChannelContext), arg0, arg1)
}

// CreateChildGroup mocks base method
func (m *MockSlackClient) CreateChildGroup(arg0 string) (*slack.Group, error) {
	ret := m.ctrl.Call(m, "CreateChildGroup", arg0)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChildGroup indicates an expected call of CreateChildGroup
func (mr *MockSlackClientMockRecorder) CreateChildGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildGroup", reflect.TypeOf((*MockSlackClient)(nil).CreateChildGroup), arg0)
}

// CreateChildGroupContext mocks base method
func (m *MockSlackClient) CreateChildGroupContext(arg0 context.Context, arg1 string) (*slack.Group, error) {
	ret := m.ctrl.Call(m, "CreateChildGroupContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChildGroupContext indicates an expected call of CreateChildGroupContext
func (mr *MockSlackClientMockRecorder) CreateChildGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildGroupContext", reflect.TypeOf((*MockSlackClient)(nil).CreateChildGroupContext), arg0, arg1)
}

// CreateConversation mocks base method
func (m *MockSlackClient) CreateConversation(arg0 string, arg1 bool) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "CreateConversation", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversation indicates an expected call of CreateConversation
func (mr *MockSlackClientMockRecorder) CreateConversation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversation", reflect.TypeOf((*MockSlackClient)(nil).CreateConversation), arg0, arg1)
}

// CreateConversationContext mocks base method
func (m *MockSlackClient) CreateConversationContext(arg0 context.Context, arg1 string, arg2 bool) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "CreateConversationContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversationContext indicates an expected call of CreateConversationContext
func (mr *MockSlackClientMockRecorder) CreateConversationContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversationContext", reflect.TypeOf((*MockSlackClient)(nil).CreateConversationContext), arg0, arg1, arg2)
}

// CreateGroup mocks base method
func (m *MockSlackClient) CreateGroup(arg0 string) (*slack.Group, error) {
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockSlackClientMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockSlackClient)(nil).CreateGroup), arg0)
}

// CreateGroupContext mocks base method
func (m *MockSlackClient) CreateGroupContext(arg0 context.Context, arg1 string) (*slack.Group, error) {
	ret := m.ctrl.Call(m, "CreateGroupContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupContext indicates an expected call of CreateGroupContext
func (mr *MockSlackClientMockRecorder) CreateGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupContext", reflect.TypeOf((*MockSlackClient)(nil).CreateGroupContext), arg0, arg1)
}

// CreateUserGroup mocks base method
func (m *MockSlackClient) CreateUserGroup(arg0 slack.UserGroup) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "CreateUserGroup", arg0)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserGroup indicates an expected call of CreateUserGroup
func (mr *MockSlackClientMockRecorder) CreateUserGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGroup", reflect.TypeOf((*MockSlackClient)(nil).CreateUserGroup), arg0)
}

// CreateUserGroupContext mocks base method
func (m *MockSlackClient) CreateUserGroupContext(arg0 context.Context, arg1 slack.UserGroup) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "CreateUserGroupContext", arg0, arg1)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserGroupContext indicates an expected call of CreateUserGroupContext
func (mr *MockSlackClientMockRecorder) CreateUserGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGroupContext", reflect.TypeOf((*MockSlackClient)(nil).CreateUserGroupContext), arg0, arg1)
}

// Debugf mocks base method
func (m *MockSlackClient) Debugf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf
func (mr *MockSlackClientMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockSlackClient)(nil).Debugf), varargs...)
}

// Debugln mocks base method
func (m *MockSlackClient) Debugln(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugln", varargs...)
}

// Debugln indicates an expected call of Debugln
func (mr *MockSlackClientMockRecorder) Debugln(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugln", reflect.TypeOf((*MockSlackClient)(nil).Debugln), arg0...)
}

// DeleteFile mocks base method
func (m *MockSlackClient) DeleteFile(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile
func (mr *MockSlackClientMockRecorder) DeleteFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockSlackClient)(nil).DeleteFile), arg0)
}

// DeleteFileComment mocks base method
func (m *MockSlackClient) DeleteFileComment(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteFileComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileComment indicates an expected call of DeleteFileComment
func (mr *MockSlackClientMockRecorder) DeleteFileComment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileComment", reflect.TypeOf((*MockSlackClient)(nil).DeleteFileComment), arg0, arg1)
}

// DeleteFileCommentContext mocks base method
func (m *MockSlackClient) DeleteFileCommentContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "DeleteFileCommentContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileCommentContext indicates an expected call of DeleteFileCommentContext
func (mr *MockSlackClientMockRecorder) DeleteFileCommentContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileCommentContext", reflect.TypeOf((*MockSlackClient)(nil).DeleteFileCommentContext), arg0, arg1, arg2)
}

// DeleteFileContext mocks base method
func (m *MockSlackClient) DeleteFileContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteFileContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileContext indicates an expected call of DeleteFileContext
func (mr *MockSlackClientMockRecorder) DeleteFileContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileContext", reflect.TypeOf((*MockSlackClient)(nil).DeleteFileContext), arg0, arg1)
}

// DeleteMessage mocks base method
func (m *MockSlackClient) DeleteMessage(arg0, arg1 string) (string, string, error) {
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockSlackClientMockRecorder) DeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockSlackClient)(nil).DeleteMessage), arg0, arg1)
}

// DeleteMessageContext mocks base method
func (m *MockSlackClient) DeleteMessageContext(arg0 context.Context, arg1, arg2 string) (string, string, error) {
	ret := m.ctrl.Call(m, "DeleteMessageContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteMessageContext indicates an expected call of DeleteMessageContext
func (mr *MockSlackClientMockRecorder) DeleteMessageContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageContext", reflect.TypeOf((*MockSlackClient)(nil).DeleteMessageContext), arg0, arg1, arg2)
}

// DeleteUserPhoto mocks base method
func (m *MockSlackClient) DeleteUserPhoto() error {
	ret := m.ctrl.Call(m, "DeleteUserPhoto")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPhoto indicates an expected call of DeleteUserPhoto
func (mr *MockSlackClientMockRecorder) DeleteUserPhoto() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPhoto", reflect.TypeOf((*MockSlackClient)(nil).DeleteUserPhoto))
}

// DeleteUserPhotoContext mocks base method
func (m *MockSlackClient) DeleteUserPhotoContext(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "DeleteUserPhotoContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPhotoContext indicates an expected call of DeleteUserPhotoContext
func (mr *MockSlackClientMockRecorder) DeleteUserPhotoContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPhotoContext", reflect.TypeOf((*MockSlackClient)(nil).DeleteUserPhotoContext), arg0)
}

// DisableUser mocks base method
func (m *MockSlackClient) DisableUser(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DisableUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableUser indicates an expected call of DisableUser
func (mr *MockSlackClientMockRecorder) DisableUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUser", reflect.TypeOf((*MockSlackClient)(nil).DisableUser), arg0, arg1)
}

// DisableUserContext mocks base method
func (m *MockSlackClient) DisableUserContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "DisableUserContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableUserContext indicates an expected call of DisableUserContext
func (mr *MockSlackClientMockRecorder) DisableUserContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserContext", reflect.TypeOf((*MockSlackClient)(nil).DisableUserContext), arg0, arg1, arg2)
}

// DisableUserGroup mocks base method
func (m *MockSlackClient) DisableUserGroup(arg0 string) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "DisableUserGroup", arg0)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableUserGroup indicates an expected call of DisableUserGroup
func (mr *MockSlackClientMockRecorder) DisableUserGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserGroup", reflect.TypeOf((*MockSlackClient)(nil).DisableUserGroup), arg0)
}

// DisableUserGroupContext mocks base method
func (m *MockSlackClient) DisableUserGroupContext(arg0 context.Context, arg1 string) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "DisableUserGroupContext", arg0, arg1)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableUserGroupContext indicates an expected call of DisableUserGroupContext
func (mr *MockSlackClientMockRecorder) DisableUserGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserGroupContext", reflect.TypeOf((*MockSlackClient)(nil).DisableUserGroupContext), arg0, arg1)
}

// EnableUserGroup mocks base method
func (m *MockSlackClient) EnableUserGroup(arg0 string) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "EnableUserGroup", arg0)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableUserGroup indicates an expected call of EnableUserGroup
func (mr *MockSlackClientMockRecorder) EnableUserGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserGroup", reflect.TypeOf((*MockSlackClient)(nil).EnableUserGroup), arg0)
}

// EnableUserGroupContext mocks base method
func (m *MockSlackClient) EnableUserGroupContext(arg0 context.Context, arg1 string) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "EnableUserGroupContext", arg0, arg1)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableUserGroupContext indicates an expected call of EnableUserGroupContext
func (mr *MockSlackClientMockRecorder) EnableUserGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserGroupContext", reflect.TypeOf((*MockSlackClient)(nil).EnableUserGroupContext), arg0, arg1)
}

// EndDND mocks base method
func (m *MockSlackClient) EndDND() error {
	ret := m.ctrl.Call(m, "EndDND")
	ret0, _ := ret[0].(error)
	return ret0
}

// EndDND indicates an expected call of EndDND
func (mr *MockSlackClientMockRecorder) EndDND() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndDND", reflect.TypeOf((*MockSlackClient)(nil).EndDND))
}

// EndDNDContext mocks base method
func (m *MockSlackClient) EndDNDContext(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "EndDNDContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndDNDContext indicates an expected call of EndDNDContext
func (mr *MockSlackClientMockRecorder) EndDNDContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndDNDContext", reflect.TypeOf((*MockSlackClient)(nil).EndDNDContext), arg0)
}

// EndSnooze mocks base method
func (m *MockSlackClient) EndSnooze() (*slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "EndSnooze")
	ret0, _ := ret[0].(*slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndSnooze indicates an expected call of EndSnooze
func (mr *MockSlackClientMockRecorder) EndSnooze() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSnooze", reflect.TypeOf((*MockSlackClient)(nil).EndSnooze))
}

// EndSnoozeContext mocks base method
func (m *MockSlackClient) EndSnoozeContext(arg0 context.Context) (*slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "EndSnoozeContext", arg0)
	ret0, _ := ret[0].(*slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndSnoozeContext indicates an expected call of EndSnoozeContext
func (mr *MockSlackClientMockRecorder) EndSnoozeContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSnoozeContext", reflect.TypeOf((*MockSlackClient)(nil).EndSnoozeContext), arg0)
}

// GetAccessLogs mocks base method
func (m *MockSlackClient) GetAccessLogs(arg0 slack.AccessLogParameters) ([]slack.Login, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetAccessLogs", arg0)
	ret0, _ := ret[0].([]slack.Login)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessLogs indicates an expected call of GetAccessLogs
func (mr *MockSlackClientMockRecorder) GetAccessLogs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogs", reflect.TypeOf((*MockSlackClient)(nil).GetAccessLogs), arg0)
}

// GetAccessLogsContext mocks base method
func (m *MockSlackClient) GetAccessLogsContext(arg0 context.Context, arg1 slack.AccessLogParameters) ([]slack.Login, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetAccessLogsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Login)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessLogsContext indicates an expected call of GetAccessLogsContext
func (mr *MockSlackClientMockRecorder) GetAccessLogsContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogsContext", reflect.TypeOf((*MockSlackClient)(nil).GetAccessLogsContext), arg0, arg1)
}

// GetBillableInfo mocks base method
func (m *MockSlackClient) GetBillableInfo(arg0 string) (map[string]slack.BillingActive, error) {
	ret := m.ctrl.Call(m, "GetBillableInfo", arg0)
	ret0, _ := ret[0].(map[string]slack.BillingActive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillableInfo indicates an expected call of GetBillableInfo
func (mr *MockSlackClientMockRecorder) GetBillableInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillableInfo", reflect.TypeOf((*MockSlackClient)(nil).GetBillableInfo), arg0)
}

// GetBillableInfoContext mocks base method
func (m *MockSlackClient) GetBillableInfoContext(arg0 context.Context, arg1 string) (map[string]slack.BillingActive, error) {
	ret := m.ctrl.Call(m, "GetBillableInfoContext", arg0, arg1)
	ret0, _ := ret[0].(map[string]slack.BillingActive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillableInfoContext indicates an expected call of GetBillableInfoContext
func (mr *MockSlackClientMockRecorder) GetBillableInfoContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillableInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetBillableInfoContext), arg0, arg1)
}

// GetBillableInfoForTeam mocks base method
func (m *MockSlackClient) GetBillableInfoForTeam() (map[string]slack.BillingActive, error) {
	ret := m.ctrl.Call(m, "GetBillableInfoForTeam")
	ret0, _ := ret[0].(map[string]slack.BillingActive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillableInfoForTeam indicates an expected call of GetBillableInfoForTeam
func (mr *MockSlackClientMockRecorder) GetBillableInfoForTeam() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillableInfoForTeam", reflect.TypeOf((*MockSlackClient)(nil).GetBillableInfoForTeam))
}

// GetBillableInfoForTeamContext mocks base method
func (m *MockSlackClient) GetBillableInfoForTeamContext(arg0 context.Context) (map[string]slack.BillingActive, error) {
	ret := m.ctrl.Call(m, "GetBillableInfoForTeamContext", arg0)
	ret0, _ := ret[0].(map[string]slack.BillingActive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillableInfoForTeamContext indicates an expected call of GetBillableInfoForTeamContext
func (mr *MockSlackClientMockRecorder) GetBillableInfoForTeamContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillableInfoForTeamContext", reflect.TypeOf((*MockSlackClient)(nil).GetBillableInfoForTeamContext), arg0)
}

// GetBotInfo mocks base method
func (m *MockSlackClient) GetBotInfo(arg0 string) (*slack.Bot, error) {
	ret := m.ctrl.Call(m, "GetBotInfo", arg0)
	ret0, _ := ret[0].(*slack.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotInfo indicates an expected call of GetBotInfo
func (mr *MockSlackClientMockRecorder) GetBotInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotInfo", reflect.TypeOf((*MockSlackClient)(nil).GetBotInfo), arg0)
}

// GetBotInfoContext mocks base method
func (m *MockSlackClient) GetBotInfoContext(arg0 context.Context, arg1 string) (*slack.Bot, error) {
	ret := m.ctrl.Call(m, "GetBotInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotInfoContext indicates an expected call of GetBotInfoContext
func (mr *MockSlackClientMockRecorder) GetBotInfoContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetBotInfoContext), arg0, arg1)
}

// GetChannelHistory mocks base method
func (m *MockSlackClient) GetChannelHistory(arg0 string, arg1 slack.HistoryParameters) (*slack.History, error) {
	ret := m.ctrl.Call(m, "GetChannelHistory", arg0, arg1)
	ret0, _ := ret[0].(*slack.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelHistory indicates an expected call of GetChannelHistory
func (mr *MockSlackClientMockRecorder) GetChannelHistory(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelHistory", reflect.TypeOf((*MockSlackClient)(nil).GetChannelHistory), arg0, arg1)
}

// GetChannelHistoryContext mocks base method
func (m *MockSlackClient) GetChannelHistoryContext(arg0 context.Context, arg1 string, arg2 slack.HistoryParameters) (*slack.History, error) {
	ret := m.ctrl.Call(m, "GetChannelHistoryContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelHistoryContext indicates an expected call of GetChannelHistoryContext
func (mr *MockSlackClientMockRecorder) GetChannelHistoryContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelHistoryContext", reflect.TypeOf((*MockSlackClient)(nil).GetChannelHistoryContext), arg0, arg1, arg2)
}

// GetChannelInfo mocks base method
func (m *MockSlackClient) GetChannelInfo(arg0 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "GetChannelInfo", arg0)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelInfo indicates an expected call of GetChannelInfo
func (mr *MockSlackClientMockRecorder) GetChannelInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelInfo", reflect.TypeOf((*MockSlackClient)(nil).GetChannelInfo), arg0)
}

// GetChannelInfoContext mocks base method
func (m *MockSlackClient) GetChannelInfoContext(arg0 context.Context, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "GetChannelInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelInfoContext indicates an expected call of GetChannelInfoContext
func (mr *MockSlackClientMockRecorder) GetChannelInfoContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetChannelInfoContext), arg0, arg1)
}

// GetChannelReplies mocks base method
func (m *MockSlackClient) GetChannelReplies(arg0, arg1 string) ([]slack.Message, error) {
	ret := m.ctrl.Call(m, "GetChannelReplies", arg0, arg1)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelReplies indicates an expected call of GetChannelReplies
func (mr *MockSlackClientMockRecorder) GetChannelReplies(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelReplies", reflect.TypeOf((*MockSlackClient)(nil).GetChannelReplies), arg0, arg1)
}

// GetChannelRepliesContext mocks base method
func (m *MockSlackClient) GetChannelRepliesContext(arg0 context.Context, arg1, arg2 string) ([]slack.Message, error) {
	ret := m.ctrl.Call(m, "GetChannelRepliesContext", arg0, arg1, arg2)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelRepliesContext indicates an expected call of GetChannelRepliesContext
func (mr *MockSlackClientMockRecorder) GetChannelRepliesContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelRepliesContext", reflect.TypeOf((*MockSlackClient)(nil).GetChannelRepliesContext), arg0, arg1, arg2)
}

// GetChannels mocks base method
func (m *MockSlackClient) GetChannels(arg0 bool) ([]slack.Channel, error) {
	ret := m.ctrl.Call(m, "GetChannels", arg0)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannels indicates an expected call of GetChannels
func (mr *MockSlackClientMockRecorder) GetChannels(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannels", reflect.TypeOf((*MockSlackClient)(nil).GetChannels), arg0)
}

// GetChannelsContext mocks base method
func (m *MockSlackClient) GetChannelsContext(arg0 context.Context, arg1 bool) ([]slack.Channel, error) {
	ret := m.ctrl.Call(m, "GetChannelsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelsContext indicates an expected call of GetChannelsContext
func (mr *MockSlackClientMockRecorder) GetChannelsContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsContext", reflect.TypeOf((*MockSlackClient)(nil).GetChannelsContext), arg0, arg1)
}

// GetConversationHistory mocks base method
func (m *MockSlackClient) GetConversationHistory(arg0 *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	ret := m.ctrl.Call(m, "GetConversationHistory", arg0)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistory indicates an expected call of GetConversationHistory
func (mr *MockSlackClientMockRecorder) GetConversationHistory(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistory", reflect.TypeOf((*MockSlackClient)(nil).GetConversationHistory), arg0)
}

// GetConversationHistoryContext mocks base method
func (m *MockSlackClient) GetConversationHistoryContext(arg0 context.Context, arg1 *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	ret := m.ctrl.Call(m, "GetConversationHistoryContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistoryContext indicates an expected call of GetConversationHistoryContext
func (mr *MockSlackClientMockRecorder) GetConversationHistoryContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistoryContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationHistoryContext), arg0, arg1)
}

// GetConversationInfo mocks base method
func (m *MockSlackClient) GetConversationInfo(arg0 string, arg1 bool) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "GetConversationInfo", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationInfo indicates an expected call of GetConversationInfo
func (mr *MockSlackClientMockRecorder) GetConversationInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationInfo", reflect.TypeOf((*MockSlackClient)(nil).GetConversationInfo), arg0, arg1)
}

// GetConversationInfoContext mocks base method
func (m *MockSlackClient) GetConversationInfoContext(arg0 context.Context, arg1 string, arg2 bool) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "GetConversationInfoContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationInfoContext indicates an expected call of GetConversationInfoContext
func (mr *MockSlackClientMockRecorder) GetConversationInfoContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationInfoContext), arg0, arg1, arg2)
}

// GetConversationReplies mocks base method
func (m *MockSlackClient) GetConversationReplies(arg0 *slack.GetConversationRepliesParameters) ([]slack.Message, bool, string, error) {
	ret := m.ctrl.Call(m, "GetConversationReplies", arg0)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetConversationReplies indicates an expected call of GetConversationReplies
func (mr *MockSlackClientMockRecorder) GetConversationReplies(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationReplies", reflect.TypeOf((*MockSlackClient)(nil).GetConversationReplies), arg0)
}

// GetConversationRepliesContext mocks base method
func (m *MockSlackClient) GetConversationRepliesContext(arg0 context.Context, arg1 *slack.GetConversationRepliesParameters) ([]slack.Message, bool, string, error) {
	ret := m.ctrl.Call(m, "GetConversationRepliesContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetConversationRepliesContext indicates an expected call of GetConversationRepliesContext
func (mr *MockSlackClientMockRecorder) GetConversationRepliesContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationRepliesContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationRepliesContext), arg0, arg1)
}

// GetConversations mocks base method
func (m *MockSlackClient) GetConversations(arg0 *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	ret := m.ctrl.Call(m, "GetConversations", arg0)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversations indicates an expected call of GetConversations
func (mr *MockSlackClientMockRecorder) GetConversations(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversations", reflect.TypeOf((*MockSlackClient)(nil).GetConversations), arg0)
}

// GetConversationsContext mocks base method
func (m *MockSlackClient) GetConversationsContext(arg0 context.Context, arg1 *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	ret := m.ctrl.Call(m, "GetConversationsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversationsContext indicates an expected call of GetConversationsContext
func (mr *MockSlackClientMockRecorder) GetConversationsContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationsContext), arg0, arg1)
}

// GetDNDInfo mocks base method
func (m *MockSlackClient) GetDNDInfo(arg0 *string) (*slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "GetDNDInfo", arg0)
	ret0, _ := ret[0].(*slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNDInfo indicates an expected call of GetDNDInfo
func (mr *MockSlackClientMockRecorder) GetDNDInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNDInfo", reflect.TypeOf((*MockSlackClient)(nil).GetDNDInfo), arg0)
}

// GetDNDInfoContext mocks base method
func (m *MockSlackClient) GetDNDInfoContext(arg0 context.Context, arg1 *string) (*slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "GetDNDInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNDInfoContext indicates an expected call of GetDNDInfoContext
func (mr *MockSlackClientMockRecorder) GetDNDInfoContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNDInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetDNDInfoContext), arg0, arg1)
}

// GetDNDTeamInfo mocks base method
func (m *MockSlackClient) GetDNDTeamInfo(arg0 []string) (map[string]slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "GetDNDTeamInfo", arg0)
	ret0, _ := ret[0].(map[string]slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNDTeamInfo indicates an expected call of GetDNDTeamInfo
func (mr *MockSlackClientMockRecorder) GetDNDTeamInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNDTeamInfo", reflect.TypeOf((*MockSlackClient)(nil).GetDNDTeamInfo), arg0)
}

// GetDNDTeamInfoContext mocks base method
func (m *MockSlackClient) GetDNDTeamInfoContext(arg0 context.Context, arg1 []string) (map[string]slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "GetDNDTeamInfoContext", arg0, arg1)
	ret0, _ := ret[0].(map[string]slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNDTeamInfoContext indicates an expected call of GetDNDTeamInfoContext
func (mr *MockSlackClientMockRecorder) GetDNDTeamInfoContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNDTeamInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetDNDTeamInfoContext), arg0, arg1)
}

// GetEmoji mocks base method
func (m *MockSlackClient) GetEmoji() (map[string]string, error) {
	ret := m.ctrl.Call(m, "GetEmoji")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmoji indicates an expected call of GetEmoji
func (mr *MockSlackClientMockRecorder) GetEmoji() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmoji", reflect.TypeOf((*MockSlackClient)(nil).GetEmoji))
}

// GetEmojiContext mocks base method
func (m *MockSlackClient) GetEmojiContext(arg0 context.Context) (map[string]string, error) {
	ret := m.ctrl.Call(m, "GetEmojiContext", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmojiContext indicates an expected call of GetEmojiContext
func (mr *MockSlackClientMockRecorder) GetEmojiContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiContext", reflect.TypeOf((*MockSlackClient)(nil).GetEmojiContext), arg0)
}

// GetFileInfo mocks base method
func (m *MockSlackClient) GetFileInfo(arg0 string, arg1, arg2 int) (*slack.File, []slack.Comment, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetFileInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFileInfo indicates an expected call of GetFileInfo
func (mr *MockSlackClientMockRecorder) GetFileInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockSlackClient)(nil).GetFileInfo), arg0, arg1, arg2)
}

// GetFileInfoContext mocks base method
func (m *MockSlackClient) GetFileInfoContext(arg0 context.Context, arg1 string, arg2, arg3 int) (*slack.File, []slack.Comment, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetFileInfoContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFileInfoContext indicates an expected call of GetFileInfoContext
func (mr *MockSlackClientMockRecorder) GetFileInfoContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetFileInfoContext), arg0, arg1, arg2, arg3)
}

// GetFiles mocks base method
func (m *MockSlackClient) GetFiles(arg0 slack.GetFilesParameters) ([]slack.File, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetFiles", arg0)
	ret0, _ := ret[0].([]slack.File)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFiles indicates an expected call of GetFiles
func (mr *MockSlackClientMockRecorder) GetFiles(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockSlackClient)(nil).GetFiles), arg0)
}

// GetFilesContext mocks base method
func (m *MockSlackClient) GetFilesContext(arg0 context.Context, arg1 slack.GetFilesParameters) ([]slack.File, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetFilesContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.File)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFilesContext indicates an expected call of GetFilesContext
func (mr *MockSlackClientMockRecorder) GetFilesContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesContext", reflect.TypeOf((*MockSlackClient)(nil).GetFilesContext), arg0, arg1)
}

// GetGroupHistory mocks base method
func (m *MockSlackClient) GetGroupHistory(arg0 string, arg1 slack.HistoryParameters) (*slack.History, error) {
	ret := m.ctrl.Call(m, "GetGroupHistory", arg0, arg1)
	ret0, _ := ret[0].(*slack.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupHistory indicates an expected call of GetGroupHistory
func (mr *MockSlackClientMockRecorder) GetGroupHistory(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupHistory", reflect.TypeOf((*MockSlackClient)(nil).GetGroupHistory), arg0, arg1)
}

// GetGroupHistoryContext mocks base method
func (m *MockSlackClient) GetGroupHistoryContext(arg0 context.Context, arg1 string, arg2 slack.HistoryParameters) (*slack.History, error) {
	ret := m.ctrl.Call(m, "GetGroupHistoryContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupHistoryContext indicates an expected call of GetGroupHistoryContext
func (mr *MockSlackClientMockRecorder) GetGroupHistoryContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupHistoryContext", reflect.TypeOf((*MockSlackClient)(nil).GetGroupHistoryContext), arg0, arg1, arg2)
}

// GetGroupInfo mocks base method
func (m *MockSlackClient) GetGroupInfo(arg0 string) (*slack.Group, error) {
	ret := m.ctrl.Call(m, "GetGroupInfo", arg0)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupInfo indicates an expected call of GetGroupInfo
func (mr *MockSlackClientMockRecorder) GetGroupInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupInfo", reflect.TypeOf((*MockSlackClient)(nil).GetGroupInfo), arg0)
}

// GetGroupInfoContext mocks base method
func (m *MockSlackClient) GetGroupInfoContext(arg0 context.Context, arg1 string) (*slack.Group, error) {
	ret := m.ctrl.Call(m, "GetGroupInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupInfoContext indicates an expected call of GetGroupInfoContext
func (mr *MockSlackClientMockRecorder) GetGroupInfoContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetGroupInfoContext), arg0, arg1)
}

// GetGroups mocks base method
func (m *MockSlackClient) GetGroups(arg0 bool) ([]slack.Group, error) {
	ret := m.ctrl.Call(m, "GetGroups", arg0)
	ret0, _ := ret[0].([]slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups
func (mr *MockSlackClientMockRecorder) GetGroups(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockSlackClient)(nil).GetGroups), arg0)
}

// GetGroupsContext mocks base method
func (m *MockSlackClient) GetGroupsContext(arg0 context.Context, arg1 bool) ([]slack.Group, error) {
	ret := m.ctrl.Call(m, "GetGroupsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsContext indicates an expected call of GetGroupsContext
func (mr *MockSlackClientMockRecorder) GetGroupsContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsContext", reflect.TypeOf((*MockSlackClient)(nil).GetGroupsContext), arg0, arg1)
}

// GetIMChannels mocks base method
func (m *MockSlackClient) GetIMChannels() ([]slack.IM, error) {
	ret := m.ctrl.Call(m, "GetIMChannels")
	ret0, _ := ret[0].([]slack.IM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIMChannels indicates an expected call of GetIMChannels
func (mr *MockSlackClientMockRecorder) GetIMChannels() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIMChannels", reflect.TypeOf((*MockSlackClient)(nil).GetIMChannels))
}

// GetIMChannelsContext mocks base method
func (m *MockSlackClient) GetIMChannelsContext(arg0 context.Context) ([]slack.IM, error) {
	ret := m.ctrl.Call(m, "GetIMChannelsContext", arg0)
	ret0, _ := ret[0].([]slack.IM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIMChannelsContext indicates an expected call of GetIMChannelsContext
func (mr *MockSlackClientMockRecorder) GetIMChannelsContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIMChannelsContext", reflect.TypeOf((*MockSlackClient)(nil).GetIMChannelsContext), arg0)
}

// GetIMHistory mocks base method
func (m *MockSlackClient) GetIMHistory(arg0 string, arg1 slack.HistoryParameters) (*slack.History, error) {
	ret := m.ctrl.Call(m, "GetIMHistory", arg0, arg1)
	ret0, _ := ret[0].(*slack.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIMHistory indicates an expected call of GetIMHistory
func (mr *MockSlackClientMockRecorder) GetIMHistory(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIMHistory", reflect.TypeOf((*MockSlackClient)(nil).GetIMHistory), arg0, arg1)
}

// GetIMHistoryContext mocks base method
func (m *MockSlackClient) GetIMHistoryContext(arg0 context.Context, arg1 string, arg2 slack.HistoryParameters) (*slack.History, error) {
	ret := m.ctrl.Call(m, "GetIMHistoryContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIMHistoryContext indicates an expected call of GetIMHistoryContext
func (mr *MockSlackClientMockRecorder) GetIMHistoryContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIMHistoryContext", reflect.TypeOf((*MockSlackClient)(nil).GetIMHistoryContext), arg0, arg1, arg2)
}

// GetReactions mocks base method
func (m *MockSlackClient) GetReactions(arg0 slack.ItemRef, arg1 slack.GetReactionsParameters) ([]slack.ItemReaction, error) {
	ret := m.ctrl.Call(m, "GetReactions", arg0, arg1)
	ret0, _ := ret[0].([]slack.ItemReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactions indicates an expected call of GetReactions
func (mr *MockSlackClientMockRecorder) GetReactions(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactions", reflect.TypeOf((*MockSlackClient)(nil).GetReactions), arg0, arg1)
}

// GetReactionsContext mocks base method
func (m *MockSlackClient) GetReactionsContext(arg0 context.Context, arg1 slack.ItemRef, arg2 slack.GetReactionsParameters) ([]slack.ItemReaction, error) {
	ret := m.ctrl.Call(m, "GetReactionsContext", arg0, arg1, arg2)
	ret0, _ := ret[0].([]slack.ItemReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactionsContext indicates an expected call of GetReactionsContext
func (mr *MockSlackClientMockRecorder) GetReactionsContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactionsContext", reflect.TypeOf((*MockSlackClient)(nil).GetReactionsContext), arg0, arg1, arg2)
}

// GetStarred mocks base method
func (m *MockSlackClient) GetStarred(arg0 slack.StarsParameters) ([]slack.StarredItem, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetStarred", arg0)
	ret0, _ := ret[0].([]slack.StarredItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStarred indicates an expected call of GetStarred
func (mr *MockSlackClientMockRecorder) GetStarred(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarred", reflect.TypeOf((*MockSlackClient)(nil).GetStarred), arg0)
}

// GetStarredContext mocks base method
func (m *MockSlackClient) GetStarredContext(arg0 context.Context, arg1 slack.StarsParameters) ([]slack.StarredItem, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "GetStarredContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.StarredItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStarredContext indicates an expected call of GetStarredContext
func (mr *MockSlackClientMockRecorder) GetStarredContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredContext", reflect.TypeOf((*MockSlackClient)(nil).GetStarredContext), arg0, arg1)
}

// GetTeamInfo mocks base method
func (m *MockSlackClient) GetTeamInfo() (*slack.TeamInfo, error) {
	ret := m.ctrl.Call(m, "GetTeamInfo")
	ret0, _ := ret[0].(*slack.TeamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamInfo indicates an expected call of GetTeamInfo
func (mr *MockSlackClientMockRecorder) GetTeamInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamInfo", reflect.TypeOf((*MockSlackClient)(nil).GetTeamInfo))
}

// GetTeamInfoContext mocks base method
func (m *MockSlackClient) GetTeamInfoContext(arg0 context.Context) (*slack.TeamInfo, error) {
	ret := m.ctrl.Call(m, "GetTeamInfoContext", arg0)
	ret0, _ := ret[0].(*slack.TeamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamInfoContext indicates an expected call of GetTeamInfoContext
func (mr *MockSlackClientMockRecorder) GetTeamInfoContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetTeamInfoContext), arg0)
}

// GetUserByEmail mocks base method
func (m *MockSlackClient) GetUserByEmail(arg0 string) (*slack.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockSlackClientMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSlackClient)(nil).GetUserByEmail), arg0)
}

// GetUserByEmailContext mocks base method
func (m *MockSlackClient) GetUserByEmailContext(arg0 context.Context, arg1 string) (*slack.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmailContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailContext indicates an expected call of GetUserByEmailContext
func (mr *MockSlackClientMockRecorder) GetUserByEmailContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserByEmailContext), arg0, arg1)
}

// GetUserGroupMembers mocks base method
func (m *MockSlackClient) GetUserGroupMembers(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetUserGroupMembers", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupMembers indicates an expected call of GetUserGroupMembers
func (mr *MockSlackClientMockRecorder) GetUserGroupMembers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupMembers", reflect.TypeOf((*MockSlackClient)(nil).GetUserGroupMembers), arg0)
}

// GetUserGroupMembersContext mocks base method
func (m *MockSlackClient) GetUserGroupMembersContext(arg0 context.Context, arg1 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetUserGroupMembersContext", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupMembersContext indicates an expected call of GetUserGroupMembersContext
func (mr *MockSlackClientMockRecorder) GetUserGroupMembersContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupMembersContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserGroupMembersContext), arg0, arg1)
}

// GetUserGroups mocks base method
func (m *MockSlackClient) GetUserGroups() ([]slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "GetUserGroups")
	ret0, _ := ret[0].([]slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups
func (mr *MockSlackClientMockRecorder) GetUserGroups() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockSlackClient)(nil).GetUserGroups))
}

// GetUserGroupsContext mocks base method
func (m *MockSlackClient) GetUserGroupsContext(arg0 context.Context) ([]slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "GetUserGroupsContext", arg0)
	ret0, _ := ret[0].([]slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupsContext indicates an expected call of GetUserGroupsContext
func (mr *MockSlackClientMockRecorder) GetUserGroupsContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupsContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserGroupsContext), arg0)
}

// GetUserIdentity mocks base method
func (m *MockSlackClient) GetUserIdentity() (*slack.UserIdentityResponse, error) {
	ret := m.ctrl.Call(m, "GetUserIdentity")
	ret0, _ := ret[0].(*slack.UserIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdentity indicates an expected call of GetUserIdentity
func (mr *MockSlackClientMockRecorder) GetUserIdentity() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdentity", reflect.TypeOf((*MockSlackClient)(nil).GetUserIdentity))
}

// GetUserIdentityContext mocks base method
func (m *MockSlackClient) GetUserIdentityContext(arg0 context.Context) (*slack.UserIdentityResponse, error) {
	ret := m.ctrl.Call(m, "GetUserIdentityContext", arg0)
	ret0, _ := ret[0].(*slack.UserIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdentityContext indicates an expected call of GetUserIdentityContext
func (mr *MockSlackClientMockRecorder) GetUserIdentityContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdentityContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserIdentityContext), arg0)
}

// GetUserInfo mocks base method
func (m *MockSlackClient) GetUserInfo(arg0 string) (*slack.User, error) {
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (mr *MockSlackClientMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockSlackClient)(nil).GetUserInfo), arg0)
}

// GetUserInfoContext mocks base method
func (m *MockSlackClient) GetUserInfoContext(arg0 context.Context, arg1 string) (*slack.User, error) {
	ret := m.ctrl.Call(m, "GetUserInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoContext indicates an expected call of GetUserInfoContext
func (mr *MockSlackClientMockRecorder) GetUserInfoContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserInfoContext), arg0, arg1)
}

// GetUserPresence mocks base method
func (m *MockSlackClient) GetUserPresence(arg0 string) (*slack.UserPresence, error) {
	ret := m.ctrl.Call(m, "GetUserPresence", arg0)
	ret0, _ := ret[0].(*slack.UserPresence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPresence indicates an expected call of GetUserPresence
func (mr *MockSlackClientMockRecorder) GetUserPresence(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPresence", reflect.TypeOf((*MockSlackClient)(nil).GetUserPresence), arg0)
}

// GetUserPresenceContext mocks base method
func (m *MockSlackClient) GetUserPresenceContext(arg0 context.Context, arg1 string) (*slack.UserPresence, error) {
	ret := m.ctrl.Call(m, "GetUserPresenceContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.UserPresence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPresenceContext indicates an expected call of GetUserPresenceContext
func (mr *MockSlackClientMockRecorder) GetUserPresenceContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPresenceContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserPresenceContext), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockSlackClient) GetUsers() ([]slack.User, error) {
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockSlackClientMockRecorder) GetUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockSlackClient)(nil).GetUsers))
}

// GetUsersContext mocks base method
func (m *MockSlackClient) GetUsersContext(arg0 context.Context) ([]slack.User, error) {
	ret := m.ctrl.Call(m, "GetUsersContext", arg0)
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersContext indicates an expected call of GetUsersContext
func (mr *MockSlackClientMockRecorder) GetUsersContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersContext", reflect.TypeOf((*MockSlackClient)(nil).GetUsersContext), arg0)
}

// GetUsersInConversation mocks base method
func (m *MockSlackClient) GetUsersInConversation(arg0 *slack.GetUsersInConversationParameters) ([]string, string, error) {
	ret := m.ctrl.Call(m, "GetUsersInConversation", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsersInConversation indicates an expected call of GetUsersInConversation
func (mr *MockSlackClientMockRecorder) GetUsersInConversation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInConversation", reflect.TypeOf((*MockSlackClient)(nil).GetUsersInConversation), arg0)
}

// GetUsersInConversationContext mocks base method
func (m *MockSlackClient) GetUsersInConversationContext(arg0 context.Context, arg1 *slack.GetUsersInConversationParameters) ([]string, string, error) {
	ret := m.ctrl.Call(m, "GetUsersInConversationContext", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsersInConversationContext indicates an expected call of GetUsersInConversationContext
func (mr *MockSlackClientMockRecorder) GetUsersInConversationContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInConversationContext", reflect.TypeOf((*MockSlackClient)(nil).GetUsersInConversationContext), arg0, arg1)
}

// InviteGuest mocks base method
func (m *MockSlackClient) InviteGuest(arg0, arg1, arg2, arg3, arg4 string) error {
	ret := m.ctrl.Call(m, "InviteGuest", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteGuest indicates an expected call of InviteGuest
func (mr *MockSlackClientMockRecorder) InviteGuest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteGuest", reflect.TypeOf((*MockSlackClient)(nil).InviteGuest), arg0, arg1, arg2, arg3, arg4)
}

// InviteGuestContext mocks base method
func (m *MockSlackClient) InviteGuestContext(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	ret := m.ctrl.Call(m, "InviteGuestContext", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteGuestContext indicates an expected call of InviteGuestContext
func (mr *MockSlackClientMockRecorder) InviteGuestContext(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteGuestContext", reflect.TypeOf((*MockSlackClient)(nil).InviteGuestContext), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InviteRestricted mocks base method
func (m *MockSlackClient) InviteRestricted(arg0, arg1, arg2, arg3, arg4 string) error {
	ret := m.ctrl.Call(m, "InviteRestricted", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteRestricted indicates an expected call of InviteRestricted
func (mr *MockSlackClientMockRecorder) InviteRestricted(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteRestricted", reflect.TypeOf((*MockSlackClient)(nil).InviteRestricted), arg0, arg1, arg2, arg3, arg4)
}

// InviteRestrictedContext mocks base method
func (m *MockSlackClient) InviteRestrictedContext(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	ret := m.ctrl.Call(m, "InviteRestrictedContext", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteRestrictedContext indicates an expected call of InviteRestrictedContext
func (mr *MockSlackClientMockRecorder) InviteRestrictedContext(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteRestrictedContext", reflect.TypeOf((*MockSlackClient)(nil).InviteRestrictedContext), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InviteToTeam mocks base method
func (m *MockSlackClient) InviteToTeam(arg0, arg1, arg2, arg3 string) error {
	ret := m.ctrl.Call(m, "InviteToTeam", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteToTeam indicates an expected call of InviteToTeam
func (mr *MockSlackClientMockRecorder) InviteToTeam(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteToTeam", reflect.TypeOf((*MockSlackClient)(nil).InviteToTeam), arg0, arg1, arg2, arg3)
}

// InviteToTeamContext mocks base method
func (m *MockSlackClient) InviteToTeamContext(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	ret := m.ctrl.Call(m, "InviteToTeamContext", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteToTeamContext indicates an expected call of InviteToTeamContext
func (mr *MockSlackClientMockRecorder) InviteToTeamContext(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteToTeamContext", reflect.TypeOf((*MockSlackClient)(nil).InviteToTeamContext), arg0, arg1, arg2, arg3, arg4)
}

// InviteUserToChannel mocks base method
func (m *MockSlackClient) InviteUserToChannel(arg0, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "InviteUserToChannel", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUserToChannel indicates an expected call of InviteUserToChannel
func (mr *MockSlackClientMockRecorder) InviteUserToChannel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUserToChannel", reflect.TypeOf((*MockSlackClient)(nil).InviteUserToChannel), arg0, arg1)
}

// InviteUserToChannelContext mocks base method
func (m *MockSlackClient) InviteUserToChannelContext(arg0 context.Context, arg1, arg2 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "InviteUserToChannelContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUserToChannelContext indicates an expected call of InviteUserToChannelContext
func (mr *MockSlackClientMockRecorder) InviteUserToChannelContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUserToChannelContext", reflect.TypeOf((*MockSlackClient)(nil).InviteUserToChannelContext), arg0, arg1, arg2)
}

// InviteUserToGroup mocks base method
func (m *MockSlackClient) InviteUserToGroup(arg0, arg1 string) (*slack.Group, bool, error) {
	ret := m.ctrl.Call(m, "InviteUserToGroup", arg0, arg1)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InviteUserToGroup indicates an expected call of InviteUserToGroup
func (mr *MockSlackClientMockRecorder) InviteUserToGroup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUserToGroup", reflect.TypeOf((*MockSlackClient)(nil).InviteUserToGroup), arg0, arg1)
}

// InviteUserToGroupContext mocks base method
func (m *MockSlackClient) InviteUserToGroupContext(arg0 context.Context, arg1, arg2 string) (*slack.Group, bool, error) {
	ret := m.ctrl.Call(m, "InviteUserToGroupContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Group)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InviteUserToGroupContext indicates an expected call of InviteUserToGroupContext
func (mr *MockSlackClientMockRecorder) InviteUserToGroupContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUserToGroupContext", reflect.TypeOf((*MockSlackClient)(nil).InviteUserToGroupContext), arg0, arg1, arg2)
}

// InviteUsersToConversation mocks base method
func (m *MockSlackClient) InviteUsersToConversation(arg0 string, arg1 ...string) (*slack.Channel, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteUsersToConversation", varargs...)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUsersToConversation indicates an expected call of InviteUsersToConversation
func (mr *MockSlackClientMockRecorder) InviteUsersToConversation(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsersToConversation", reflect.TypeOf((*MockSlackClient)(nil).InviteUsersToConversation), varargs...)
}

// InviteUsersToConversationContext mocks base method
func (m *MockSlackClient) InviteUsersToConversationContext(arg0 context.Context, arg1 string, arg2 ...string) (*slack.Channel, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteUsersToConversationContext", varargs...)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUsersToConversationContext indicates an expected call of InviteUsersToConversationContext
func (mr *MockSlackClientMockRecorder) InviteUsersToConversationContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsersToConversationContext", reflect.TypeOf((*MockSlackClient)(nil).InviteUsersToConversationContext), varargs...)
}

// JoinChannel mocks base method
func (m *MockSlackClient) JoinChannel(arg0 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "JoinChannel", arg0)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChannel indicates an expected call of JoinChannel
func (mr *MockSlackClientMockRecorder) JoinChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChannel", reflect.TypeOf((*MockSlackClient)(nil).JoinChannel), arg0)
}

// JoinChannelContext mocks base method
func (m *MockSlackClient) JoinChannelContext(arg0 context.Context, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "JoinChannelContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChannelContext indicates an expected call of JoinChannelContext
func (mr *MockSlackClientMockRecorder) JoinChannelContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChannelContext", reflect.TypeOf((*MockSlackClient)(nil).JoinChannelContext), arg0, arg1)
}

// JoinConversation mocks base method
func (m *MockSlackClient) JoinConversation(arg0 string) (*slack.Channel, string, []string, error) {
	ret := m.ctrl.Call(m, "JoinConversation", arg0)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// JoinConversation indicates an expected call of JoinConversation
func (mr *MockSlackClientMockRecorder) JoinConversation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinConversation", reflect.TypeOf((*MockSlackClient)(nil).JoinConversation), arg0)
}

// JoinConversationContext mocks base method
func (m *MockSlackClient) JoinConversationContext(arg0 context.Context, arg1 string) (*slack.Channel, string, []string, error) {
	ret := m.ctrl.Call(m, "JoinConversationContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// JoinConversationContext indicates an expected call of JoinConversationContext
func (mr *MockSlackClientMockRecorder) JoinConversationContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinConversationContext", reflect.TypeOf((*MockSlackClient)(nil).JoinConversationContext), arg0, arg1)
}

// KickUserFromChannel mocks base method
func (m *MockSlackClient) KickUserFromChannel(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "KickUserFromChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickUserFromChannel indicates an expected call of KickUserFromChannel
func (mr *MockSlackClientMockRecorder) KickUserFromChannel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickUserFromChannel", reflect.TypeOf((*MockSlackClient)(nil).KickUserFromChannel), arg0, arg1)
}

// KickUserFromChannelContext mocks base method
func (m *MockSlackClient) KickUserFromChannelContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "KickUserFromChannelContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickUserFromChannelContext indicates an expected call of KickUserFromChannelContext
func (mr *MockSlackClientMockRecorder) KickUserFromChannelContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickUserFromChannelContext", reflect.TypeOf((*MockSlackClient)(nil).KickUserFromChannelContext), arg0, arg1, arg2)
}

// KickUserFromConversation mocks base method
func (m *MockSlackClient) KickUserFromConversation(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "KickUserFromConversation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickUserFromConversation indicates an expected call of KickUserFromConversation
func (mr *MockSlackClientMockRecorder) KickUserFromConversation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickUserFromConversation", reflect.TypeOf((*MockSlackClient)(nil).KickUserFromConversation), arg0, arg1)
}

// KickUserFromConversationContext mocks base method
func (m *MockSlackClient) KickUserFromConversationContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "KickUserFromConversationContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickUserFromConversationContext indicates an expected call of KickUserFromConversationContext
func (mr *MockSlackClientMockRecorder) KickUserFromConversationContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickUserFromConversationContext", reflect.TypeOf((*MockSlackClient)(nil).KickUserFromConversationContext), arg0, arg1, arg2)
}

// KickUserFromGroup mocks base method
func (m *MockSlackClient) KickUserFromGroup(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "KickUserFromGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickUserFromGroup indicates an expected call of KickUserFromGroup
func (mr *MockSlackClientMockRecorder) KickUserFromGroup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickUserFromGroup", reflect.TypeOf((*MockSlackClient)(nil).KickUserFromGroup), arg0, arg1)
}

// KickUserFromGroupContext mocks base method
func (m *MockSlackClient) KickUserFromGroupContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "KickUserFromGroupContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickUserFromGroupContext indicates an expected call of KickUserFromGroupContext
func (mr *MockSlackClientMockRecorder) KickUserFromGroupContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickUserFromGroupContext", reflect.TypeOf((*MockSlackClient)(nil).KickUserFromGroupContext), arg0, arg1, arg2)
}

// LeaveChannel mocks base method
func (m *MockSlackClient) LeaveChannel(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "LeaveChannel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveChannel indicates an expected call of LeaveChannel
func (mr *MockSlackClientMockRecorder) LeaveChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChannel", reflect.TypeOf((*MockSlackClient)(nil).LeaveChannel), arg0)
}

// LeaveChannelContext mocks base method
func (m *MockSlackClient) LeaveChannelContext(arg0 context.Context, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "LeaveChannelContext", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveChannelContext indicates an expected call of LeaveChannelContext
func (mr *MockSlackClientMockRecorder) LeaveChannelContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChannelContext", reflect.TypeOf((*MockSlackClient)(nil).LeaveChannelContext), arg0, arg1)
}

// LeaveConversation mocks base method
func (m *MockSlackClient) LeaveConversation(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "LeaveConversation", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveConversation indicates an expected call of LeaveConversation
func (mr *MockSlackClientMockRecorder) LeaveConversation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveConversation", reflect.TypeOf((*MockSlackClient)(nil).LeaveConversation), arg0)
}

// LeaveConversationContext mocks base method
func (m *MockSlackClient) LeaveConversationContext(arg0 context.Context, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "LeaveConversationContext", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveConversationContext indicates an expected call of LeaveConversationContext
func (mr *MockSlackClientMockRecorder) LeaveConversationContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveConversationContext", reflect.TypeOf((*MockSlackClient)(nil).LeaveConversationContext), arg0, arg1)
}

// LeaveGroup mocks base method
func (m *MockSlackClient) LeaveGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "LeaveGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveGroup indicates an expected call of LeaveGroup
func (mr *MockSlackClientMockRecorder) LeaveGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveGroup", reflect.TypeOf((*MockSlackClient)(nil).LeaveGroup), arg0)
}

// LeaveGroupContext mocks base method
func (m *MockSlackClient) LeaveGroupContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "LeaveGroupContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveGroupContext indicates an expected call of LeaveGroupContext
func (mr *MockSlackClientMockRecorder) LeaveGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveGroupContext", reflect.TypeOf((*MockSlackClient)(nil).LeaveGroupContext), arg0, arg1)
}

// ListPins mocks base method
func (m *MockSlackClient) ListPins(arg0 string) ([]slack.Item, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ListPins", arg0)
	ret0, _ := ret[0].([]slack.Item)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPins indicates an expected call of ListPins
func (mr *MockSlackClientMockRecorder) ListPins(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPins", reflect.TypeOf((*MockSlackClient)(nil).ListPins), arg0)
}

// ListPinsContext mocks base method
func (m *MockSlackClient) ListPinsContext(arg0 context.Context, arg1 string) ([]slack.Item, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ListPinsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Item)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPinsContext indicates an expected call of ListPinsContext
func (mr *MockSlackClientMockRecorder) ListPinsContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPinsContext", reflect.TypeOf((*MockSlackClient)(nil).ListPinsContext), arg0, arg1)
}

// ListReactions mocks base method
func (m *MockSlackClient) ListReactions(arg0 slack.ListReactionsParameters) ([]slack.ReactedItem, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ListReactions", arg0)
	ret0, _ := ret[0].([]slack.ReactedItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReactions indicates an expected call of ListReactions
func (mr *MockSlackClientMockRecorder) ListReactions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReactions", reflect.TypeOf((*MockSlackClient)(nil).ListReactions), arg0)
}

// ListReactionsContext mocks base method
func (m *MockSlackClient) ListReactionsContext(arg0 context.Context, arg1 slack.ListReactionsParameters) ([]slack.ReactedItem, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ListReactionsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.ReactedItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReactionsContext indicates an expected call of ListReactionsContext
func (mr *MockSlackClientMockRecorder) ListReactionsContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReactionsContext", reflect.TypeOf((*MockSlackClient)(nil).ListReactionsContext), arg0, arg1)
}

// ListStars mocks base method
func (m *MockSlackClient) ListStars(arg0 slack.StarsParameters) ([]slack.Item, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ListStars", arg0)
	ret0, _ := ret[0].([]slack.Item)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStars indicates an expected call of ListStars
func (mr *MockSlackClientMockRecorder) ListStars(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStars", reflect.TypeOf((*MockSlackClient)(nil).ListStars), arg0)
}

// ListStarsContext mocks base method
func (m *MockSlackClient) ListStarsContext(arg0 context.Context, arg1 slack.StarsParameters) ([]slack.Item, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ListStarsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Item)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStarsContext indicates an expected call of ListStarsContext
func (mr *MockSlackClientMockRecorder) ListStarsContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStarsContext", reflect.TypeOf((*MockSlackClient)(nil).ListStarsContext), arg0, arg1)
}

// MarkIMChannel mocks base method
func (m *MockSlackClient) MarkIMChannel(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "MarkIMChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkIMChannel indicates an expected call of MarkIMChannel
func (mr *MockSlackClientMockRecorder) MarkIMChannel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkIMChannel", reflect.TypeOf((*MockSlackClient)(nil).MarkIMChannel), arg0, arg1)
}

// MarkIMChannelContext mocks base method
func (m *MockSlackClient) MarkIMChannelContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "MarkIMChannelContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkIMChannelContext indicates an expected call of MarkIMChannelContext
func (mr *MockSlackClientMockRecorder) MarkIMChannelContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkIMChannelContext", reflect.TypeOf((*MockSlackClient)(nil).MarkIMChannelContext), arg0, arg1, arg2)
}

// NewRTM mocks base method
func (m *MockSlackClient) NewRTM(arg0 ...slack.RTMOption) *slack.RTM {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRTM", varargs...)
	ret0, _ := ret[0].(*slack.RTM)
	return ret0
}

// NewRTM indicates an expected call of NewRTM
func (mr *MockSlackClientMockRecorder) NewRTM(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRTM", reflect.TypeOf((*MockSlackClient)(nil).NewRTM), arg0...)
}

// NewRTMWithOptions mocks base method
func (m *MockSlackClient) NewRTMWithOptions(arg0 *slack.RTMOptions) *slack.RTM {
	ret := m.ctrl.Call(m, "NewRTMWithOptions", arg0)
	ret0, _ := ret[0].(*slack.RTM)
	return ret0
}

// NewRTMWithOptions indicates an expected call of NewRTMWithOptions
func (mr *MockSlackClientMockRecorder) NewRTMWithOptions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRTMWithOptions", reflect.TypeOf((*MockSlackClient)(nil).NewRTMWithOptions), arg0)
}

// OpenConversation mocks base method
func (m *MockSlackClient) OpenConversation(arg0 *slack.OpenConversationParameters) (*slack.Channel, bool, bool, error) {
	ret := m.ctrl.Call(m, "OpenConversation", arg0)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// OpenConversation indicates an expected call of OpenConversation
func (mr *MockSlackClientMockRecorder) OpenConversation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConversation", reflect.TypeOf((*MockSlackClient)(nil).OpenConversation), arg0)
}

// OpenConversationContext mocks base method
func (m *MockSlackClient) OpenConversationContext(arg0 context.Context, arg1 *slack.OpenConversationParameters) (*slack.Channel, bool, bool, error) {
	ret := m.ctrl.Call(m, "OpenConversationContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// OpenConversationContext indicates an expected call of OpenConversationContext
func (mr *MockSlackClientMockRecorder) OpenConversationContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConversationContext", reflect.TypeOf((*MockSlackClient)(nil).OpenConversationContext), arg0, arg1)
}

// OpenGroup mocks base method
func (m *MockSlackClient) OpenGroup(arg0 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "OpenGroup", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenGroup indicates an expected call of OpenGroup
func (mr *MockSlackClientMockRecorder) OpenGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenGroup", reflect.TypeOf((*MockSlackClient)(nil).OpenGroup), arg0)
}

// OpenGroupContext mocks base method
func (m *MockSlackClient) OpenGroupContext(arg0 context.Context, arg1 string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "OpenGroupContext", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenGroupContext indicates an expected call of OpenGroupContext
func (mr *MockSlackClientMockRecorder) OpenGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenGroupContext", reflect.TypeOf((*MockSlackClient)(nil).OpenGroupContext), arg0, arg1)
}

// OpenIMChannel mocks base method
func (m *MockSlackClient) OpenIMChannel(arg0 string) (bool, bool, string, error) {
	ret := m.ctrl.Call(m, "OpenIMChannel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// OpenIMChannel indicates an expected call of OpenIMChannel
func (mr *MockSlackClientMockRecorder) OpenIMChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenIMChannel", reflect.TypeOf((*MockSlackClient)(nil).OpenIMChannel), arg0)
}

// OpenIMChannelContext mocks base method
func (m *MockSlackClient) OpenIMChannelContext(arg0 context.Context, arg1 string) (bool, bool, string, error) {
	ret := m.ctrl.Call(m, "OpenIMChannelContext", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// OpenIMChannelContext indicates an expected call of OpenIMChannelContext
func (mr *MockSlackClientMockRecorder) OpenIMChannelContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenIMChannelContext", reflect.TypeOf((*MockSlackClient)(nil).OpenIMChannelContext), arg0, arg1)
}

// PostEphemeral mocks base method
func (m *MockSlackClient) PostEphemeral(arg0, arg1 string, arg2 ...slack.MsgOption) (string, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostEphemeral", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEphemeral indicates an expected call of PostEphemeral
func (mr *MockSlackClientMockRecorder) PostEphemeral(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEphemeral", reflect.TypeOf((*MockSlackClient)(nil).PostEphemeral), varargs...)
}

// PostEphemeralContext mocks base method
func (m *MockSlackClient) PostEphemeralContext(arg0 context.Context, arg1, arg2 string, arg3 ...slack.MsgOption) (string, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostEphemeralContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEphemeralContext indicates an expected call of PostEphemeralContext
func (mr *MockSlackClientMockRecorder) PostEphemeralContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEphemeralContext", reflect.TypeOf((*MockSlackClient)(nil).PostEphemeralContext), varargs...)
}

// PostMessage mocks base method
func (m *MockSlackClient) PostMessage(arg0, arg1 string, arg2 slack.PostMessageParameters) (string, string, error) {
	ret := m.ctrl.Call(m, "PostMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessage indicates an expected call of PostMessage
func (mr *MockSlackClientMockRecorder) PostMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackClient)(nil).PostMessage), arg0, arg1, arg2)
}

// PostMessageContext mocks base method
func (m *MockSlackClient) PostMessageContext(arg0 context.Context, arg1, arg2 string, arg3 slack.PostMessageParameters) (string, string, error) {
	ret := m.ctrl.Call(m, "PostMessageContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessageContext indicates an expected call of PostMessageContext
func (mr *MockSlackClientMockRecorder) PostMessageContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessageContext", reflect.TypeOf((*MockSlackClient)(nil).PostMessageContext), arg0, arg1, arg2, arg3)
}

// RemovePin mocks base method
func (m *MockSlackClient) RemovePin(arg0 string, arg1 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "RemovePin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePin indicates an expected call of RemovePin
func (mr *MockSlackClientMockRecorder) RemovePin(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePin", reflect.TypeOf((*MockSlackClient)(nil).RemovePin), arg0, arg1)
}

// RemovePinContext mocks base method
func (m *MockSlackClient) RemovePinContext(arg0 context.Context, arg1 string, arg2 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "RemovePinContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePinContext indicates an expected call of RemovePinContext
func (mr *MockSlackClientMockRecorder) RemovePinContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePinContext", reflect.TypeOf((*MockSlackClient)(nil).RemovePinContext), arg0, arg1, arg2)
}

// RemoveReaction mocks base method
func (m *MockSlackClient) RemoveReaction(arg0 string, arg1 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "RemoveReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReaction indicates an expected call of RemoveReaction
func (mr *MockSlackClientMockRecorder) RemoveReaction(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReaction", reflect.TypeOf((*MockSlackClient)(nil).RemoveReaction), arg0, arg1)
}

// RemoveReactionContext mocks base method
func (m *MockSlackClient) RemoveReactionContext(arg0 context.Context, arg1 string, arg2 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "RemoveReactionContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReactionContext indicates an expected call of RemoveReactionContext
func (mr *MockSlackClientMockRecorder) RemoveReactionContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReactionContext", reflect.TypeOf((*MockSlackClient)(nil).RemoveReactionContext), arg0, arg1, arg2)
}

// RemoveStar mocks base method
func (m *MockSlackClient) RemoveStar(arg0 string, arg1 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "RemoveStar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStar indicates an expected call of RemoveStar
func (mr *MockSlackClientMockRecorder) RemoveStar(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStar", reflect.TypeOf((*MockSlackClient)(nil).RemoveStar), arg0, arg1)
}

// RemoveStarContext mocks base method
func (m *MockSlackClient) RemoveStarContext(arg0 context.Context, arg1 string, arg2 slack.ItemRef) error {
	ret := m.ctrl.Call(m, "RemoveStarContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStarContext indicates an expected call of RemoveStarContext
func (mr *MockSlackClientMockRecorder) RemoveStarContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStarContext", reflect.TypeOf((*MockSlackClient)(nil).RemoveStarContext), arg0, arg1, arg2)
}

// RenameChannel mocks base method
func (m *MockSlackClient) RenameChannel(arg0, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "RenameChannel", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameChannel indicates an expected call of RenameChannel
func (mr *MockSlackClientMockRecorder) RenameChannel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameChannel", reflect.TypeOf((*MockSlackClient)(nil).RenameChannel), arg0, arg1)
}

// RenameChannelContext mocks base method
func (m *MockSlackClient) RenameChannelContext(arg0 context.Context, arg1, arg2 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "RenameChannelContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameChannelContext indicates an expected call of RenameChannelContext
func (mr *MockSlackClientMockRecorder) RenameChannelContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameChannelContext", reflect.TypeOf((*MockSlackClient)(nil).RenameChannelContext), arg0, arg1, arg2)
}

// RenameConversation mocks base method
func (m *MockSlackClient) RenameConversation(arg0, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "RenameConversation", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameConversation indicates an expected call of RenameConversation
func (mr *MockSlackClientMockRecorder) RenameConversation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameConversation", reflect.TypeOf((*MockSlackClient)(nil).RenameConversation), arg0, arg1)
}

// RenameConversationContext mocks base method
func (m *MockSlackClient) RenameConversationContext(arg0 context.Context, arg1, arg2 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "RenameConversationContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameConversationContext indicates an expected call of RenameConversationContext
func (mr *MockSlackClientMockRecorder) RenameConversationContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameConversationContext", reflect.TypeOf((*MockSlackClient)(nil).RenameConversationContext), arg0, arg1, arg2)
}

// RenameGroup mocks base method
func (m *MockSlackClient) RenameGroup(arg0, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "RenameGroup", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameGroup indicates an expected call of RenameGroup
func (mr *MockSlackClientMockRecorder) RenameGroup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameGroup", reflect.TypeOf((*MockSlackClient)(nil).RenameGroup), arg0, arg1)
}

// RenameGroupContext mocks base method
func (m *MockSlackClient) RenameGroupContext(arg0 context.Context, arg1, arg2 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "RenameGroupContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameGroupContext indicates an expected call of RenameGroupContext
func (mr *MockSlackClientMockRecorder) RenameGroupContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameGroupContext", reflect.TypeOf((*MockSlackClient)(nil).RenameGroupContext), arg0, arg1, arg2)
}

// RevokeFilePublicURL mocks base method
func (m *MockSlackClient) RevokeFilePublicURL(arg0 string) (*slack.File, error) {
	ret := m.ctrl.Call(m, "RevokeFilePublicURL", arg0)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeFilePublicURL indicates an expected call of RevokeFilePublicURL
func (mr *MockSlackClientMockRecorder) RevokeFilePublicURL(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFilePublicURL", reflect.TypeOf((*MockSlackClient)(nil).RevokeFilePublicURL), arg0)
}

// RevokeFilePublicURLContext mocks base method
func (m *MockSlackClient) RevokeFilePublicURLContext(arg0 context.Context, arg1 string) (*slack.File, error) {
	ret := m.ctrl.Call(m, "RevokeFilePublicURLContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeFilePublicURLContext indicates an expected call of RevokeFilePublicURLContext
func (mr *MockSlackClientMockRecorder) RevokeFilePublicURLContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFilePublicURLContext", reflect.TypeOf((*MockSlackClient)(nil).RevokeFilePublicURLContext), arg0, arg1)
}

// Search mocks base method
func (m *MockSlackClient) Search(arg0 string, arg1 slack.SearchParameters) (*slack.SearchMessages, *slack.SearchFiles, error) {
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*slack.SearchMessages)
	ret1, _ := ret[1].(*slack.SearchFiles)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search
func (mr *MockSlackClientMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSlackClient)(nil).Search), arg0, arg1)
}

// SearchContext mocks base method
func (m *MockSlackClient) SearchContext(arg0 context.Context, arg1 string, arg2 slack.SearchParameters) (*slack.SearchMessages, *slack.SearchFiles, error) {
	ret := m.ctrl.Call(m, "SearchContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.SearchMessages)
	ret1, _ := ret[1].(*slack.SearchFiles)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchContext indicates an expected call of SearchContext
func (mr *MockSlackClientMockRecorder) SearchContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContext", reflect.TypeOf((*MockSlackClient)(nil).SearchContext), arg0, arg1, arg2)
}

// SearchFiles mocks base method
func (m *MockSlackClient) SearchFiles(arg0 string, arg1 slack.SearchParameters) (*slack.SearchFiles, error) {
	ret := m.ctrl.Call(m, "SearchFiles", arg0, arg1)
	ret0, _ := ret[0].(*slack.SearchFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFiles indicates an expected call of SearchFiles
func (mr *MockSlackClientMockRecorder) SearchFiles(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFiles", reflect.TypeOf((*MockSlackClient)(nil).SearchFiles), arg0, arg1)
}

// SearchFilesContext mocks base method
func (m *MockSlackClient) SearchFilesContext(arg0 context.Context, arg1 string, arg2 slack.SearchParameters) (*slack.SearchFiles, error) {
	ret := m.ctrl.Call(m, "SearchFilesContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.SearchFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilesContext indicates an expected call of SearchFilesContext
func (mr *MockSlackClientMockRecorder) SearchFilesContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesContext", reflect.TypeOf((*MockSlackClient)(nil).SearchFilesContext), arg0, arg1, arg2)
}

// SearchMessages mocks base method
func (m *MockSlackClient) SearchMessages(arg0 string, arg1 slack.SearchParameters) (*slack.SearchMessages, error) {
	ret := m.ctrl.Call(m, "SearchMessages", arg0, arg1)
	ret0, _ := ret[0].(*slack.SearchMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessages indicates an expected call of SearchMessages
func (mr *MockSlackClientMockRecorder) SearchMessages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessages", reflect.TypeOf((*MockSlackClient)(nil).SearchMessages), arg0, arg1)
}

// SearchMessagesContext mocks base method
func (m *MockSlackClient) SearchMessagesContext(arg0 context.Context, arg1 string, arg2 slack.SearchParameters) (*slack.SearchMessages, error) {
	ret := m.ctrl.Call(m, "SearchMessagesContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.SearchMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessagesContext indicates an expected call of SearchMessagesContext
func (mr *MockSlackClientMockRecorder) SearchMessagesContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessagesContext", reflect.TypeOf((*MockSlackClient)(nil).SearchMessagesContext), arg0, arg1, arg2)
}

// SendMessage mocks base method
func (m *MockSlackClient) SendMessage(arg0 string, arg1 ...slack.MsgOption) (string, string, string, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockSlackClientMockRecorder) SendMessage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSlackClient)(nil).SendMessage), varargs...)
}

// SendMessageContext mocks base method
func (m *MockSlackClient) SendMessageContext(arg0 context.Context, arg1 string, arg2 ...slack.MsgOption) (string, string, string, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SendMessageContext indicates an expected call of SendMessageContext
func (mr *MockSlackClientMockRecorder) SendMessageContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageContext", reflect.TypeOf((*MockSlackClient)(nil).SendMessageContext), varargs...)
}

// SendSSOBindingEmail mocks base method
func (m *MockSlackClient) SendSSOBindingEmail(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SendSSOBindingEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSSOBindingEmail indicates an expected call of SendSSOBindingEmail
func (mr *MockSlackClientMockRecorder) SendSSOBindingEmail(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSSOBindingEmail", reflect.TypeOf((*MockSlackClient)(nil).SendSSOBindingEmail), arg0, arg1)
}

// SendSSOBindingEmailContext mocks base method
func (m *MockSlackClient) SendSSOBindingEmailContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SendSSOBindingEmailContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSSOBindingEmailContext indicates an expected call of SendSSOBindingEmailContext
func (mr *MockSlackClientMockRecorder) SendSSOBindingEmailContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSSOBindingEmailContext", reflect.TypeOf((*MockSlackClient)(nil).SendSSOBindingEmailContext), arg0, arg1, arg2)
}

// SetChannelPurpose mocks base method
func (m *MockSlackClient) SetChannelPurpose(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "SetChannelPurpose", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChannelPurpose indicates an expected call of SetChannelPurpose
func (mr *MockSlackClientMockRecorder) SetChannelPurpose(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelPurpose", reflect.TypeOf((*MockSlackClient)(nil).SetChannelPurpose), arg0, arg1)
}

// SetChannelPurposeContext mocks base method
func (m *MockSlackClient) SetChannelPurposeContext(arg0 context.Context, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "SetChannelPurposeContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChannelPurposeContext indicates an expected call of SetChannelPurposeContext
func (mr *MockSlackClientMockRecorder) SetChannelPurposeContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelPurposeContext", reflect.TypeOf((*MockSlackClient)(nil).SetChannelPurposeContext), arg0, arg1, arg2)
}

// SetChannelReadMark mocks base method
func (m *MockSlackClient) SetChannelReadMark(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SetChannelReadMark", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChannelReadMark indicates an expected call of SetChannelReadMark
func (mr *MockSlackClientMockRecorder) SetChannelReadMark(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelReadMark", reflect.TypeOf((*MockSlackClient)(nil).SetChannelReadMark), arg0, arg1)
}

// SetChannelReadMarkContext mocks base method
func (m *MockSlackClient) SetChannelReadMarkContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetChannelReadMarkContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChannelReadMarkContext indicates an expected call of SetChannelReadMarkContext
func (mr *MockSlackClientMockRecorder) SetChannelReadMarkContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelReadMarkContext", reflect.TypeOf((*MockSlackClient)(nil).SetChannelReadMarkContext), arg0, arg1, arg2)
}

// SetChannelTopic mocks base method
func (m *MockSlackClient) SetChannelTopic(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "SetChannelTopic", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChannelTopic indicates an expected call of SetChannelTopic
func (mr *MockSlackClientMockRecorder) SetChannelTopic(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelTopic", reflect.TypeOf((*MockSlackClient)(nil).SetChannelTopic), arg0, arg1)
}

// SetChannelTopicContext mocks base method
func (m *MockSlackClient) SetChannelTopicContext(arg0 context.Context, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "SetChannelTopicContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChannelTopicContext indicates an expected call of SetChannelTopicContext
func (mr *MockSlackClientMockRecorder) SetChannelTopicContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelTopicContext", reflect.TypeOf((*MockSlackClient)(nil).SetChannelTopicContext), arg0, arg1, arg2)
}

// SetDebug mocks base method
func (m *MockSlackClient) SetDebug(arg0 bool) {
	m.ctrl.Call(m, "SetDebug", arg0)
}

// SetDebug indicates an expected call of SetDebug
func (mr *MockSlackClientMockRecorder) SetDebug(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebug", reflect.TypeOf((*MockSlackClient)(nil).SetDebug), arg0)
}

// SetGroupPurpose mocks base method
func (m *MockSlackClient) SetGroupPurpose(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "SetGroupPurpose", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupPurpose indicates an expected call of SetGroupPurpose
func (mr *MockSlackClientMockRecorder) SetGroupPurpose(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupPurpose", reflect.TypeOf((*MockSlackClient)(nil).SetGroupPurpose), arg0, arg1)
}

// SetGroupPurposeContext mocks base method
func (m *MockSlackClient) SetGroupPurposeContext(arg0 context.Context, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "SetGroupPurposeContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupPurposeContext indicates an expected call of SetGroupPurposeContext
func (mr *MockSlackClientMockRecorder) SetGroupPurposeContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupPurposeContext", reflect.TypeOf((*MockSlackClient)(nil).SetGroupPurposeContext), arg0, arg1, arg2)
}

// SetGroupReadMark mocks base method
func (m *MockSlackClient) SetGroupReadMark(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SetGroupReadMark", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroupReadMark indicates an expected call of SetGroupReadMark
func (mr *MockSlackClientMockRecorder) SetGroupReadMark(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupReadMark", reflect.TypeOf((*MockSlackClient)(nil).SetGroupReadMark), arg0, arg1)
}

// SetGroupReadMarkContext mocks base method
func (m *MockSlackClient) SetGroupReadMarkContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetGroupReadMarkContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroupReadMarkContext indicates an expected call of SetGroupReadMarkContext
func (mr *MockSlackClientMockRecorder) SetGroupReadMarkContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupReadMarkContext", reflect.TypeOf((*MockSlackClient)(nil).SetGroupReadMarkContext), arg0, arg1, arg2)
}

// SetGroupTopic mocks base method
func (m *MockSlackClient) SetGroupTopic(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "SetGroupTopic", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupTopic indicates an expected call of SetGroupTopic
func (mr *MockSlackClientMockRecorder) SetGroupTopic(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupTopic", reflect.TypeOf((*MockSlackClient)(nil).SetGroupTopic), arg0, arg1)
}

// SetGroupTopicContext mocks base method
func (m *MockSlackClient) SetGroupTopicContext(arg0 context.Context, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "SetGroupTopicContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupTopicContext indicates an expected call of SetGroupTopicContext
func (mr *MockSlackClientMockRecorder) SetGroupTopicContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupTopicContext", reflect.TypeOf((*MockSlackClient)(nil).SetGroupTopicContext), arg0, arg1, arg2)
}

// SetPurposeOfConversation mocks base method
func (m *MockSlackClient) SetPurposeOfConversation(arg0, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "SetPurposeOfConversation", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPurposeOfConversation indicates an expected call of SetPurposeOfConversation
func (mr *MockSlackClientMockRecorder) SetPurposeOfConversation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPurposeOfConversation", reflect.TypeOf((*MockSlackClient)(nil).SetPurposeOfConversation), arg0, arg1)
}

// SetPurposeOfConversationContext mocks base method
func (m *MockSlackClient) SetPurposeOfConversationContext(arg0 context.Context, arg1, arg2 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "SetPurposeOfConversationContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPurposeOfConversationContext indicates an expected call of SetPurposeOfConversationContext
func (mr *MockSlackClientMockRecorder) SetPurposeOfConversationContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPurposeOfConversationContext", reflect.TypeOf((*MockSlackClient)(nil).SetPurposeOfConversationContext), arg0, arg1, arg2)
}

// SetRegular mocks base method
func (m *MockSlackClient) SetRegular(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SetRegular", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRegular indicates an expected call of SetRegular
func (mr *MockSlackClientMockRecorder) SetRegular(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegular", reflect.TypeOf((*MockSlackClient)(nil).SetRegular), arg0, arg1)
}

// SetRegularContext mocks base method
func (m *MockSlackClient) SetRegularContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetRegularContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRegularContext indicates an expected call of SetRegularContext
func (mr *MockSlackClientMockRecorder) SetRegularContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegularContext", reflect.TypeOf((*MockSlackClient)(nil).SetRegularContext), arg0, arg1, arg2)
}

// SetRestricted mocks base method
func (m *MockSlackClient) SetRestricted(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SetRestricted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRestricted indicates an expected call of SetRestricted
func (mr *MockSlackClientMockRecorder) SetRestricted(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRestricted", reflect.TypeOf((*MockSlackClient)(nil).SetRestricted), arg0, arg1)
}

// SetRestrictedContext mocks base method
func (m *MockSlackClient) SetRestrictedContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetRestrictedContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRestrictedContext indicates an expected call of SetRestrictedContext
func (mr *MockSlackClientMockRecorder) SetRestrictedContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRestrictedContext", reflect.TypeOf((*MockSlackClient)(nil).SetRestrictedContext), arg0, arg1, arg2)
}

// SetSnooze mocks base method
func (m *MockSlackClient) SetSnooze(arg0 int) (*slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "SetSnooze", arg0)
	ret0, _ := ret[0].(*slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSnooze indicates an expected call of SetSnooze
func (mr *MockSlackClientMockRecorder) SetSnooze(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnooze", reflect.TypeOf((*MockSlackClient)(nil).SetSnooze), arg0)
}

// SetSnoozeContext mocks base method
func (m *MockSlackClient) SetSnoozeContext(arg0 context.Context, arg1 int) (*slack.DNDStatus, error) {
	ret := m.ctrl.Call(m, "SetSnoozeContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSnoozeContext indicates an expected call of SetSnoozeContext
func (mr *MockSlackClientMockRecorder) SetSnoozeContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnoozeContext", reflect.TypeOf((*MockSlackClient)(nil).SetSnoozeContext), arg0, arg1)
}

// SetTopicOfConversation mocks base method
func (m *MockSlackClient) SetTopicOfConversation(arg0, arg1 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "SetTopicOfConversation", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTopicOfConversation indicates an expected call of SetTopicOfConversation
func (mr *MockSlackClientMockRecorder) SetTopicOfConversation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicOfConversation", reflect.TypeOf((*MockSlackClient)(nil).SetTopicOfConversation), arg0, arg1)
}

// SetTopicOfConversationContext mocks base method
func (m *MockSlackClient) SetTopicOfConversationContext(arg0 context.Context, arg1, arg2 string) (*slack.Channel, error) {
	ret := m.ctrl.Call(m, "SetTopicOfConversationContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTopicOfConversationContext indicates an expected call of SetTopicOfConversationContext
func (mr *MockSlackClientMockRecorder) SetTopicOfConversationContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicOfConversationContext", reflect.TypeOf((*MockSlackClient)(nil).SetTopicOfConversationContext), arg0, arg1, arg2)
}

// SetUltraRestricted mocks base method
func (m *MockSlackClient) SetUltraRestricted(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetUltraRestricted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUltraRestricted indicates an expected call of SetUltraRestricted
func (mr *MockSlackClientMockRecorder) SetUltraRestricted(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUltraRestricted", reflect.TypeOf((*MockSlackClient)(nil).SetUltraRestricted), arg0, arg1, arg2)
}

// SetUltraRestrictedContext mocks base method
func (m *MockSlackClient) SetUltraRestrictedContext(arg0 context.Context, arg1, arg2, arg3 string) error {
	ret := m.ctrl.Call(m, "SetUltraRestrictedContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUltraRestrictedContext indicates an expected call of SetUltraRestrictedContext
func (mr *MockSlackClientMockRecorder) SetUltraRestrictedContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUltraRestrictedContext", reflect.TypeOf((*MockSlackClient)(nil).SetUltraRestrictedContext), arg0, arg1, arg2, arg3)
}

// SetUserAsActive mocks base method
func (m *MockSlackClient) SetUserAsActive() error {
	ret := m.ctrl.Call(m, "SetUserAsActive")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAsActive indicates an expected call of SetUserAsActive
func (mr *MockSlackClientMockRecorder) SetUserAsActive() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAsActive", reflect.TypeOf((*MockSlackClient)(nil).SetUserAsActive))
}

// SetUserAsActiveContext mocks base method
func (m *MockSlackClient) SetUserAsActiveContext(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "SetUserAsActiveContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAsActiveContext indicates an expected call of SetUserAsActiveContext
func (mr *MockSlackClientMockRecorder) SetUserAsActiveContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAsActiveContext", reflect.TypeOf((*MockSlackClient)(nil).SetUserAsActiveContext), arg0)
}

// SetUserCustomStatus mocks base method
func (m *MockSlackClient) SetUserCustomStatus(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SetUserCustomStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCustomStatus indicates an expected call of SetUserCustomStatus
func (mr *MockSlackClientMockRecorder) SetUserCustomStatus(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCustomStatus", reflect.TypeOf((*MockSlackClient)(nil).SetUserCustomStatus), arg0, arg1)
}

// SetUserCustomStatusContext mocks base method
func (m *MockSlackClient) SetUserCustomStatusContext(arg0 context.Context, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetUserCustomStatusContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCustomStatusContext indicates an expected call of SetUserCustomStatusContext
func (mr *MockSlackClientMockRecorder) SetUserCustomStatusContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCustomStatusContext", reflect.TypeOf((*MockSlackClient)(nil).SetUserCustomStatusContext), arg0, arg1, arg2)
}

// SetUserPhoto mocks base method
func (m *MockSlackClient) SetUserPhoto(arg0 string, arg1 slack.UserSetPhotoParams) error {
	ret := m.ctrl.Call(m, "SetUserPhoto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserPhoto indicates an expected call of SetUserPhoto
func (mr *MockSlackClientMockRecorder) SetUserPhoto(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPhoto", reflect.TypeOf((*MockSlackClient)(nil).SetUserPhoto), arg0, arg1)
}

// SetUserPhotoContext mocks base method
func (m *MockSlackClient) SetUserPhotoContext(arg0 context.Context, arg1 string, arg2 slack.UserSetPhotoParams) error {
	ret := m.ctrl.Call(m, "SetUserPhotoContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserPhotoContext indicates an expected call of SetUserPhotoContext
func (mr *MockSlackClientMockRecorder) SetUserPhotoContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPhotoContext", reflect.TypeOf((*MockSlackClient)(nil).SetUserPhotoContext), arg0, arg1, arg2)
}

// SetUserPresence mocks base method
func (m *MockSlackClient) SetUserPresence(arg0 string) error {
	ret := m.ctrl.Call(m, "SetUserPresence", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserPresence indicates an expected call of SetUserPresence
func (mr *MockSlackClientMockRecorder) SetUserPresence(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPresence", reflect.TypeOf((*MockSlackClient)(nil).SetUserPresence), arg0)
}

// SetUserPresenceContext mocks base method
func (m *MockSlackClient) SetUserPresenceContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "SetUserPresenceContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserPresenceContext indicates an expected call of SetUserPresenceContext
func (mr *MockSlackClientMockRecorder) SetUserPresenceContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPresenceContext", reflect.TypeOf((*MockSlackClient)(nil).SetUserPresenceContext), arg0, arg1)
}

// ShareFilePublicURL mocks base method
func (m *MockSlackClient) ShareFilePublicURL(arg0 string) (*slack.File, []slack.Comment, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ShareFilePublicURL", arg0)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ShareFilePublicURL indicates an expected call of ShareFilePublicURL
func (mr *MockSlackClientMockRecorder) ShareFilePublicURL(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareFilePublicURL", reflect.TypeOf((*MockSlackClient)(nil).ShareFilePublicURL), arg0)
}

// ShareFilePublicURLContext mocks base method
func (m *MockSlackClient) ShareFilePublicURLContext(arg0 context.Context, arg1 string) (*slack.File, []slack.Comment, *slack.Paging, error) {
	ret := m.ctrl.Call(m, "ShareFilePublicURLContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ShareFilePublicURLContext indicates an expected call of ShareFilePublicURLContext
func (mr *MockSlackClientMockRecorder) ShareFilePublicURLContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareFilePublicURLContext", reflect.TypeOf((*MockSlackClient)(nil).ShareFilePublicURLContext), arg0, arg1)
}

// StartRTM mocks base method
func (m *MockSlackClient) StartRTM() (*slack.Info, string, error) {
	ret := m.ctrl.Call(m, "StartRTM")
	ret0, _ := ret[0].(*slack.Info)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartRTM indicates an expected call of StartRTM
func (mr *MockSlackClientMockRecorder) StartRTM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRTM", reflect.TypeOf((*MockSlackClient)(nil).StartRTM))
}

// StartRTMContext mocks base method
func (m *MockSlackClient) StartRTMContext(arg0 context.Context) (*slack.Info, string, error) {
	ret := m.ctrl.Call(m, "StartRTMContext", arg0)
	ret0, _ := ret[0].(*slack.Info)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartRTMContext indicates an expected call of StartRTMContext
func (mr *MockSlackClientMockRecorder) StartRTMContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRTMContext", reflect.TypeOf((*MockSlackClient)(nil).StartRTMContext), arg0)
}

// UnArchiveConversation mocks base method
func (m *MockSlackClient) UnArchiveConversation(arg0 string) error {
	ret := m.ctrl.Call(m, "UnArchiveConversation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnArchiveConversation indicates an expected call of UnArchiveConversation
func (mr *MockSlackClientMockRecorder) UnArchiveConversation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnArchiveConversation", reflect.TypeOf((*MockSlackClient)(nil).UnArchiveConversation), arg0)
}

// UnArchiveConversationContext mocks base method
func (m *MockSlackClient) UnArchiveConversationContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "UnArchiveConversationContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnArchiveConversationContext indicates an expected call of UnArchiveConversationContext
func (mr *MockSlackClientMockRecorder) UnArchiveConversationContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnArchiveConversationContext", reflect.TypeOf((*MockSlackClient)(nil).UnArchiveConversationContext), arg0, arg1)
}

// UnarchiveChannel mocks base method
func (m *MockSlackClient) UnarchiveChannel(arg0 string) error {
	ret := m.ctrl.Call(m, "UnarchiveChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnarchiveChannel indicates an expected call of UnarchiveChannel
func (mr *MockSlackClientMockRecorder) UnarchiveChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveChannel", reflect.TypeOf((*MockSlackClient)(nil).UnarchiveChannel), arg0)
}

// UnarchiveChannelContext mocks base method
func (m *MockSlackClient) UnarchiveChannelContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "UnarchiveChannelContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnarchiveChannelContext indicates an expected call of UnarchiveChannelContext
func (mr *MockSlackClientMockRecorder) UnarchiveChannelContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveChannelContext", reflect.TypeOf((*MockSlackClient)(nil).UnarchiveChannelContext), arg0, arg1)
}

// UnarchiveGroup mocks base method
func (m *MockSlackClient) UnarchiveGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "UnarchiveGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnarchiveGroup indicates an expected call of UnarchiveGroup
func (mr *MockSlackClientMockRecorder) UnarchiveGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveGroup", reflect.TypeOf((*MockSlackClient)(nil).UnarchiveGroup), arg0)
}

// UnarchiveGroupContext mocks base method
func (m *MockSlackClient) UnarchiveGroupContext(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "UnarchiveGroupContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnarchiveGroupContext indicates an expected call of UnarchiveGroupContext
func (mr *MockSlackClientMockRecorder) UnarchiveGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveGroupContext", reflect.TypeOf((*MockSlackClient)(nil).UnarchiveGroupContext), arg0, arg1)
}

// UnsetUserCustomStatus mocks base method
func (m *MockSlackClient) UnsetUserCustomStatus() error {
	ret := m.ctrl.Call(m, "UnsetUserCustomStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetUserCustomStatus indicates an expected call of UnsetUserCustomStatus
func (mr *MockSlackClientMockRecorder) UnsetUserCustomStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetUserCustomStatus", reflect.TypeOf((*MockSlackClient)(nil).UnsetUserCustomStatus))
}

// UnsetUserCustomStatusContext mocks base method
func (m *MockSlackClient) UnsetUserCustomStatusContext(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "UnsetUserCustomStatusContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetUserCustomStatusContext indicates an expected call of UnsetUserCustomStatusContext
func (mr *MockSlackClientMockRecorder) UnsetUserCustomStatusContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetUserCustomStatusContext", reflect.TypeOf((*MockSlackClient)(nil).UnsetUserCustomStatusContext), arg0)
}

// UpdateMessage mocks base method
func (m *MockSlackClient) UpdateMessage(arg0, arg1, arg2 string) (string, string, string, error) {
	ret := m.ctrl.Call(m, "UpdateMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// UpdateMessage indicates an expected call of UpdateMessage
func (mr *MockSlackClientMockRecorder) UpdateMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockSlackClient)(nil).UpdateMessage), arg0, arg1, arg2)
}

// UpdateMessageContext mocks base method
func (m *MockSlackClient) UpdateMessageContext(arg0 context.Context, arg1, arg2, arg3 string) (string, string, string, error) {
	ret := m.ctrl.Call(m, "UpdateMessageContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// UpdateMessageContext indicates an expected call of UpdateMessageContext
func (mr *MockSlackClientMockRecorder) UpdateMessageContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageContext", reflect.TypeOf((*MockSlackClient)(nil).UpdateMessageContext), arg0, arg1, arg2, arg3)
}

// UpdateUserGroup mocks base method
func (m *MockSlackClient) UpdateUserGroup(arg0 slack.UserGroup) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "UpdateUserGroup", arg0)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserGroup indicates an expected call of UpdateUserGroup
func (mr *MockSlackClientMockRecorder) UpdateUserGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGroup", reflect.TypeOf((*MockSlackClient)(nil).UpdateUserGroup), arg0)
}

// UpdateUserGroupContext mocks base method
func (m *MockSlackClient) UpdateUserGroupContext(arg0 context.Context, arg1 slack.UserGroup) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "UpdateUserGroupContext", arg0, arg1)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserGroupContext indicates an expected call of UpdateUserGroupContext
func (mr *MockSlackClientMockRecorder) UpdateUserGroupContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGroupContext", reflect.TypeOf((*MockSlackClient)(nil).UpdateUserGroupContext), arg0, arg1)
}

// UpdateUserGroupMembers mocks base method
func (m *MockSlackClient) UpdateUserGroupMembers(arg0, arg1 string) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "UpdateUserGroupMembers", arg0, arg1)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserGroupMembers indicates an expected call of UpdateUserGroupMembers
func (mr *MockSlackClientMockRecorder) UpdateUserGroupMembers(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGroupMembers", reflect.TypeOf((*MockSlackClient)(nil).UpdateUserGroupMembers), arg0, arg1)
}

// UpdateUserGroupMembersContext mocks base method
func (m *MockSlackClient) UpdateUserGroupMembersContext(arg0 context.Context, arg1, arg2 string) (slack.UserGroup, error) {
	ret := m.ctrl.Call(m, "UpdateUserGroupMembersContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserGroupMembersContext indicates an expected call of UpdateUserGroupMembersContext
func (mr *MockSlackClientMockRecorder) UpdateUserGroupMembersContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGroupMembersContext", reflect.TypeOf((*MockSlackClient)(nil).UpdateUserGroupMembersContext), arg0, arg1, arg2)
}

// UploadFile mocks base method
func (m *MockSlackClient) UploadFile(arg0 slack.FileUploadParameters) (*slack.File, error) {
	ret := m.ctrl.Call(m, "UploadFile", arg0)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockSlackClientMockRecorder) UploadFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockSlackClient)(nil).UploadFile), arg0)
}

// UploadFileContext mocks base method
func (m *MockSlackClient) UploadFileContext(arg0 context.Context, arg1 slack.FileUploadParameters) (*slack.File, error) {
	ret := m.ctrl.Call(m, "UploadFileContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileContext indicates an expected call of UploadFileContext
func (mr *MockSlackClientMockRecorder) UploadFileContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileContext", reflect.TypeOf((*MockSlackClient)(nil).UploadFileContext), arg0, arg1)
}
